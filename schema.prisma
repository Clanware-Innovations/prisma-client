generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents a user in the Discord bot application.
model User {
  /// Discord user id
  id String @id @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// List of justice submissions made by the user.
  justiceSubmissions JusticeSubmission[]

  /// API token associated with the user.
  apiToken String? @map("api_token")

  @@map("users")
}

/// Represents a member in a guild of the Discord bot application.
model Member {
  /// Discord user id of the member.
  id String @id

  /// Discord guild id of the member.
  guildId String @map("guild_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Guild that the member belongs to.
  guild Guild @relation(fields: [guildId], references: [id])

  /// List of tags created by the member.
  tags Tag[]

  @@map("members")
}

/// Represents a guild in the Discord bot application.
model Guild {
  /// Discord guild id.
  id String @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// List of members in the guild.
  members Member[]

  /// List of tags associated with the guild.
  tags Tag[]

  @@map("guilds")
}

/// Represents a tag in the Discord bot application.
model Tag {
  /// Unique identifier for the tag.
  id Int @id @default(autoincrement())

  /// Name of the tag.
  name String

  /// Content of the tag.
  content String

  /// Number of times the tag has been used.
  uses Int @default(0)

  /// Discord guild id associated with the tag.
  guildId String @map("guild_id")

  /// Discord member id associated with the tag.
  memberId String @map("member_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Guild that the tag belongs to.
  guild Guild @relation(fields: [guildId], references: [id])

  /// Author of the tag.
  author Member @relation(fields: [memberId], references: [id])

  @@unique([name, guildId])
  @@map("tags")
}

/// Represents a justice submission in the Discord bot application.
model JusticeSubmission {
  /// Unique identifier for the justice submission.
  id Int @id @default(autoincrement())

  /// Discord user id of the author.
  userId String @map("member_id")

  /// Type of the justice submission.
  type String @map("type") // 'xplt' 'dgn' 'appeal'

  /// Target id of the justice submission.
  targetId String @map("target") @db.VarChar(50)

  /// Evidence provided for the justice submission.
  evidence String? @map("evidence") @db.VarChar(900)

  /// Additional notes for the justice submission.
  notes String? @map("notes") @db.VarChar(900)

  /// Status of the justice submission.
  status String @default("Pending Approval") @map("status")

  /// Indicates if the justice submission is active.
  active Boolean @default(true)

  /// Discord message id associated with the justice submission.
  messageId String? @map("message_id")

  votesFor     String[]
  votesAgainst String[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Author of the justice submission.
  author User @relation(fields: [userId], references: [id])

  /// Indicates the resolved date of the justice submission if it is not active.
  resolvedAt DateTime? @map("resolved_at")

  @@map("justice_submissions")
}

model Justiciar {
  id        Int    @id @default(autoincrement())
  discordId String
  realName  String
  avatarUrl String

  categoryId              String
  mainChannelId           String
  mainChannelWebhookId    String
  mainChannelWebhookToken String
  managementChannelId     String
  roleId                  String

  threads    JusticeThread[]
  identities JusticiarIdentity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JusticeThread {
  id           Int        @id @default(autoincrement())
  threadId     String
  justiciar    Justiciar? @relation(fields: [justiciarId], references: [id])
  justiciarId  Int?
  isManagement Boolean    @default(false)

  submissionId Int

  createdAt DateTime @default(now())
}

model JusticiarIdentity {
  id          Int               @id @default(autoincrement())
  justiciarId Int
  identityId  Int
  justiciar   Justiciar         @relation(fields: [justiciarId], references: [id])
  identity    AnonymousIdentity @relation(fields: [identityId], references: [id])

  active Boolean @default(true)

  createdAt DateTime @default(now())
}

model AnonymousIdentity {
  id   Int    @id @default(autoincrement())
  name String

  justiciarIdentities JusticiarIdentity[]

  avatarUrl String
}

model MetricEvent {
  id         Int      @id @default(autoincrement())
  type       String   // e.g. 'command', 'error', 'guild_join', 'guild_leave', 'performance', 'feature'
  name       String?  // e.g. command name, feature name, error type
  userId     String?  // Discord user id (if applicable)
  guildId    String?  // Discord guild id (if applicable)
  data       Json?    // Any extra data (e.g. error stack, performance numbers)
  createdAt  DateTime @default(now())
}

model Ticket {
  id           String   @id @default(uuid())
  creatorId    String
  type         String
  status       String   // 'open' or 'closed'
  createdAt    DateTime @default(now())
  closedAt     DateTime?
  channelId    String
  participants String[] // Array of user IDs
  closeReason  String?
  transcripts  Transcript[]
}

model Transcript {
  id         String   @id @default(uuid())
  ticketId   String
  message    String
  createdAt  DateTime @default(now())
  userId     String
  attachments String[] // Array of attachment URLs
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
}