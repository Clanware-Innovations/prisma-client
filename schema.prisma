generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents a user in the Discord bot application.
model User {
  /// Discord user id
  id String @id @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// List of justice submissions made by the user.
  justiceSubmissions JusticeSubmission[]

  /// API token associated with the user.
  apiToken String? @map("api_token")

  @@map("users")
}

/// Represents a member in a guild of the Discord bot application.
model Member {
  /// Discord user id of the member.
  id String @id

  /// Discord guild id of the member.
  guildId String @map("guild_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Guild that the member belongs to.
  guild Guild @relation(fields: [guildId], references: [id])

  /// List of tags created by the member.
  tags Tag[]

  @@map("members")
}

/// Represents a guild in the Discord bot application.
model Guild {
  /// Discord guild id.
  id String @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// List of members in the guild.
  members Member[]

  /// List of tags associated with the guild.
  tags Tag[]

  @@map("guilds")
}

/// Represents a tag in the Discord bot application.
model Tag {
  /// Unique identifier for the tag.
  id Int @id @default(autoincrement())

  /// Name of the tag.
  name String

  /// Content of the tag.
  content String

  /// Number of times the tag has been used.
  uses Int @default(0)

  /// Discord guild id associated with the tag.
  guildId String @map("guild_id")

  /// Discord member id associated with the tag.
  memberId String @map("member_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Guild that the tag belongs to.
  guild Guild @relation(fields: [guildId], references: [id])

  /// Author of the tag.
  author Member @relation(fields: [memberId], references: [id])

  @@unique([name, guildId])
  @@map("tags")
}

/// Represents a justice submission in the Discord bot application.
model JusticeSubmission {
  /// Unique identifier for the justice submission.
  id Int @id @default(autoincrement())

  /// Discord user id of the author.
  userId String @map("member_id")

  /// Type of the justice submission.
  type String @map("type") // 'xplt' 'dgn' 'appeal'

  /// Target id of the justice submission.
  targetId String @map("target") @db.VarChar(50)

  /// Evidence provided for the justice submission.
  evidence String? @map("evidence") @db.VarChar(900)

  /// Additional notes for the justice submission.
  notes String? @map("notes") @db.VarChar(900)

  /// Status of the justice submission.
  status String @default("Pending Approval") @map("status")

  /// Indicates if the justice submission is active.
  active Boolean @default(true)

  /// Discord message id associated with the justice submission.
  messageId String? @map("message_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Author of the justice submission.
  author User @relation(fields: [userId], references: [id])

  /// Indicates the resolved date of the justice submission if it is not active.
  resolvedAt DateTime? @map("resolved_at")

  @@map("justice_submissions")
}

/// Represents a clan in the Discord bot application.
model Clan {
  /// Roblox group id of the clan.
  robloxGroupId String @id @map("roblox_group_id")

  /// Name of the clan.
  name String @unique @map("name")

  /// Description of the clan.
  description String? @map("description") @db.VarChar(900)

  /// Roblox owner id of the clan.
  robloxOwnerId String @map("roblox_owner_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// List of places associated with the clan.
  places  Place[]
  /// List of tier list ratings associated with the clan.
  ratings TierListRating[]
}

/// Represents a place in the Discord bot application.
model Place {
  /// Roblox place id of the place.
  robloxPlaceId String @unique @map("roblox_place_id")

  /// Name of the place.
  name String @map("name")

  /// Description of the place.
  description String? @map("description") @db.VarChar(900)

  /// Clan id associated with the place.
  clanId String @map("clan_id")

  /// Icon URL of the place.
  iconUrl String? @map("icon_url") @db.VarChar(900)

  /// Minimum number of players required for the place.
  minPlayers Int? @map("min_players")

  /// Maximum number of players allowed in the place.
  maxPlayers Int? @map("max_players")

  /// Player ratio for the place (defender:raider).
  playerRatio String @default("1:1") @map("player_ratio")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  /// Clan that the place belongs to.
  clan      Clan       @relation(fields: [clanId], references: [robloxGroupId])
  raidTimes RaidTime[]
}

/// Represents a raid time slot.
model RaidTime {
  /// The unique identifier for the raid time slot.
  id Int @id @default(autoincrement())

  /// The start time of the raid in HH:mm 24-hour format.
  startTime String @map("start_time")

  /// The end time of the raid in HH:mm 24-hour format.
  endTime String @map("end_time")

  /// The ID of the place associated with the raid time slot.
  placeId String @map("place_id")

  /// The place associated with the raid time slot.
  place Place @relation(fields: [placeId], references: [robloxPlaceId])

  /// The database table name for the raid times model.
  @@map("raid_times")
}

model TierListRating {
  id           Int      @id @default(autoincrement())
  month        DateTime @default(now())
  clanId       String
  skill        Int
  community    Int
  activity     Int
  development  Int
  organisation Int
  degeneracy   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clan         Clan     @relation(fields: [clanId], references: [robloxGroupId])

  @@unique([month, clanId])
  @@map("tier_list_ratings")
}
